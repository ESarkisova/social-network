{"version":3,"sources":["components/Login/index.module.css","assets/refresh.svg","components/Login/Login.jsx"],"names":["module","exports","LoginFormRedux","reduxForm","form","props","iconLogin","type","iconPassword","onSubmit","handleSubmit","className","cn","form_login","createField","InputField","required","addonBefore","Checkbox","id","htmlFor","captcha","onClick","getCaptcha","src","refresh","alt","error","cnFormControl","errorMessage","htmlType","connect","state","login","auth","username","userId","isAuth","setAuth","to","login__wrapp","formData"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,aAAe,4BAA4B,WAAa,0BAA0B,QAAU,uBAAuB,eAAiB,gC,oBCDtJD,EAAOC,QAAU,IAA0B,qC,iCCA3C,oKA0DMC,EAAiBC,YAAU,CAACC,KAAM,SAAjBD,EA5CP,SAACE,GACb,IAAMC,EAAY,kBAAC,IAAD,CAAMC,KAAK,SACvBC,EAAe,kBAAC,IAAD,CAAMD,KAAK,SAChC,OACI,kBAAC,IAAD,CAAME,SAAUJ,EAAMK,aAAcC,UAAWC,IAAGC,YAC7CC,YACG,QACAC,IACA,QACA,CAACC,KACD,CAACT,KAAM,QAASU,YAAaX,IAEhCQ,YACG,WACAC,IACA,WACA,CAACC,KACD,CAACT,KAAM,WAAYU,YAAaT,IAEpC,6BACKM,YAAY,aAAaI,IAAU,GAAG,GAAG,CAACX,KAAM,WAAYY,GAAI,eACjE,2BAAOC,QAAQ,cAAf,qFAEHf,EAAMgB,SACH,6BACI,4BAAQd,KAAK,SAASe,QAASjB,EAAMkB,YAAY,yBAAKC,IAAKC,IAASC,IAAI,aACxE,yBAAKf,UAAWC,IAAGS,QAASG,IAAKnB,EAAMgB,QAASK,IAAI,YACnDZ,YAAY,UAAUC,IAAY,GAAG,CAACC,KAAU,CAACT,KAAM,UAI/DF,EAAMsB,OACP,wBAAIhB,UAAaiB,IAAcC,cAC1BxB,EAAMsB,OAMX,kBAAC,IAAD,CAAQpB,KAAK,UAAUuB,SAAS,UAAhC,sCAqCGC,uBAVO,SAACC,GACnB,MAAQ,CACJC,MAAOD,EAAME,KAAKC,SAClBC,OAAQJ,EAAME,KAAKE,OACnBf,QAASW,EAAME,KAAKb,QACpBgB,OAAQL,EAAME,KAAKG,UAKa,CAACC,YAASf,gBAAnCQ,EA9BH,SAAC1B,GAMT,OAAIA,EAAMgC,OACC,kBAAC,IAAD,CAAWE,GAAG,aAIjB,yBAAK5B,UAAWC,IAAG4B,cACf,oNACA,kBAACtC,EAAD,CAAgBO,SAXX,SAACgC,GACdpC,EAAMiC,QAAQG,IAU8BpB,QAAWhB,EAAMgB,QAASE,WAAYlB,EAAMkB","file":"static/js/4.dee91267.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"login__wrapp\":\"Login_login__wrapp__1qI6s\",\"form_login\":\"Login_form_login__QNlsp\",\"captcha\":\"Login_captcha__1b4t6\",\"captcha__input\":\"Login_captcha__input__1qvQ9\"};","module.exports = __webpack_public_path__ + \"static/media/refresh.82bf759d.svg\";","import React from 'react';\r\nimport {reduxForm} from \"redux-form\";\r\nimport cn from './index.module.css';\r\nimport cnFormControl from '../common/FormComponents/index.module.css';\r\nimport {connect} from \"react-redux\";\r\nimport {getCaptcha, setAuth} from \"../../Redux/auth-reducer\";\r\nimport {createField, InputField} from \"../common/FormComponents/FormComponents\";\r\nimport {required} from \"../common/validate/validate\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport refresh from \"../../assets/refresh.svg\";\r\nimport {Button, Checkbox, Form, Icon} from \"antd\";\r\n\r\n\r\n\r\nlet LoginForm = (props) => {\r\n    const iconLogin = <Icon type=\"user\" />;\r\n    const iconPassword = <Icon type=\"lock\" />;\r\n    return (\r\n        <Form onSubmit={props.handleSubmit} className={cn.form_login}>\r\n            {createField(\r\n                \"email\",\r\n                InputField,\r\n                \"Email\",\r\n                [required],\r\n                {type: \"email\", addonBefore: iconLogin }\r\n                )}\r\n            {createField(\r\n                \"password\",\r\n                InputField,\r\n                \"Password\",\r\n                [required],\r\n                {type: \"password\", addonBefore: iconPassword }\r\n                )}\r\n            <div>\r\n                {createField(\"rememberMe\",Checkbox ,'',[],{type: \"checkbox\", id: \"rememberMe\"})}\r\n                <label htmlFor=\"rememberMe\"> Запомнить меня</label>\r\n            </div>\r\n            {props.captcha &&\r\n                <div>\r\n                    <button type=\"button\" onClick={props.getCaptcha}><img src={refresh} alt=\"refresh\"/></button>\r\n                    <img className={cn.captcha} src={props.captcha} alt=\"captcha\" />\r\n                    {createField(\"captcha\",InputField, \"\",[required],{type: \"text\"})}\r\n                </div>\r\n            }\r\n\r\n            {props.error &&\r\n            <ul className = {cnFormControl.errorMessage}>\r\n                {props.error}\r\n            </ul>\r\n            }\r\n\r\n\r\n\r\n            <Button type=\"primary\" htmlType=\"submit\">Войти</Button>\r\n        </Form>\r\n    )\r\n};\r\n\r\nconst LoginFormRedux = reduxForm({form: 'login'})(LoginForm);\r\n\r\nlet Login = (props) => {\r\n\r\n    const onSubmit = (formData) => {\r\n        props.setAuth(formData);\r\n    };\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect  to=\"/profile\" />\r\n    }\r\n\r\n    return (\r\n            <div className={cn.login__wrapp}>\r\n                <h1>Введите, пожалуйста, логин и пароль</h1>\r\n                <LoginFormRedux onSubmit={onSubmit} captcha = {props.captcha} getCaptcha={props.getCaptcha}/>\r\n            </div>\r\n        )\r\n\r\n\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n    return ({\r\n        login: state.auth.username,\r\n        userId: state.auth.userId,\r\n        captcha: state.auth.captcha,\r\n        isAuth: state.auth.isAuth\r\n    });\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, {setAuth, getCaptcha})(Login);"],"sourceRoot":""}